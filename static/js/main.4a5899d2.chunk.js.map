{"version":3,"sources":["components/Table.js","components/TableRow.js","components/TableCell.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","handleAddRow","setState","numOfRows","state","handleAddColumn","numOfCells","handleSelectColor","event","color","target","value","className","onClick","this","onChange","id","produceTable","rows","i","columns","j","push","key","toString","cells","Component","TableRow","TableCell","handleClick","bgcolor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAaqBA,G,wDAEjB,WAAYC,GACX,IAAD,8BACI,cAAMA,IA2EVC,aAAe,WAEX,EAAKC,SAAS,CAAEC,UAAW,EAAKC,MAAMD,UAAY,KA9EtD,EAsFAE,gBAAkB,WAEd,EAAKH,SAAS,CAAEI,WAAY,EAAKF,MAAME,WAAa,KAxFxD,EAgGAC,kBAAoB,SAACC,GAEjB,EAAKN,SAAS,CAAEO,MAAOD,EAAME,OAAOC,SAhGpC,EAAKP,MACL,CACIK,MAAO,OACPH,WAAY,EACZH,UAAW,GANnB,E,qDAeI,OACI,iCACI,yBAAKS,UAAU,WACX,4BAAQC,QAASC,KAAKb,cAAtB,WACA,4BAAQY,QAASC,KAAKT,iBAAtB,cACA,4BAAQU,SAAUD,KAAKP,mBACnB,4BAAQI,MAAM,QAAd,kBACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,YAIR,2BAAOK,GAAG,QACN,+BACKF,KAAKG,aAAaH,KAAKV,MAAMD,UAAWW,KAAKV,MAAME,iB,mCAoB3DH,EAAWG,GAIpB,IAFA,IAAIY,EAAO,GAEHC,EAAI,EAAGA,EAAIhB,EAAWgB,IAC9B,CAGI,IAFA,IAAIC,EAAU,GAENC,EAAI,EAAGA,EAAIf,EAAYe,IAE3BD,EAAQE,KAAK,kBAAC,EAAD,CAAWC,IAAKJ,EAAEE,EAAEG,WAAYf,MAAOK,KAAKV,MAAMK,SAEnES,EAAKI,KAAK,kBAAC,EAAD,CAAUC,IAAKJ,EAAEK,WAAYC,MAAOL,EAASX,MAAOK,KAAKV,MAAMK,SAG7E,OAAOS,M,GAvEoBQ,cCDdC,E,kDAEjB,WAAY3B,GACX,IAAD,8BACI,cAAMA,IACDI,MACL,CACImB,IAAKvB,EAAMuB,IACXE,MAAOzB,EAAMyB,MACbhB,MAAOT,EAAMS,OANrB,E,qDAYI,OACI,wBAAIG,UAAU,YACTE,KAAKd,MAAMyB,W,GAjBUC,aCDjBE,E,kDAEjB,WAAY5B,GACX,IAAD,8BACI,cAAMA,IAWV6B,YAAc,WAEV,EAAK3B,SAAS,CAAEO,MAAO,EAAKT,MAAMS,SAZlC,EAAKL,MACL,CACImB,IAAKvB,EAAMuB,IACXd,MAAO,eALf,E,qDAmBI,OACI,wBAAIG,UAAU,YAAYkB,QAAShB,KAAKV,MAAMK,MAAOI,QAASC,KAAKe,kB,GAvBxCH,aCQlBK,E,uKAIb,OACI,yBAAKnB,UAAU,OACX,4BAAQA,UAAU,cACd,gDACA,kBAAC,EAAD,Y,GARac,aCPbM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4a5899d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TableRow, TableCell } from '.';\r\n\r\n/**\r\n * A presentational component which is rendered by App\r\n * \r\n * The Table component will:\r\n * - be a parent of TableRow\r\n * - render the add row/column buttons as well as the dropdown color selection menu\r\n * - handle button click events\r\n * - handle the creation of rows and columns\r\n * - handle color selection\r\n */\r\nexport default class Table extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            color: \"gray\",\r\n            numOfCells: 1,\r\n            numOfRows: 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the buttons and the table\r\n     */\r\n    render()\r\n    {\r\n        return (\r\n            <section>\r\n                <div className=\"buttons\">\r\n                    <button onClick={this.handleAddRow}>Add Row</button>\r\n                    <button onClick={this.handleAddColumn}>Add Column</button>\r\n                    <select onChange={this.handleSelectColor}>\r\n                        <option value=\"gray\">Gray (Default)</option>\r\n                        <option value=\"red\">Red</option>\r\n                        <option value=\"orange\">Orange</option>\r\n                        <option value=\"yellow\">Yellow</option>\r\n                        <option value=\"green\">Green</option>\r\n                        <option value=\"blue\">Blue</option>\r\n                        <option value=\"purple\">Purple</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <table id=\"grid\">\r\n                    <tbody>\r\n                        {this.produceTable(this.state.numOfRows, this.state.numOfCells)}\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * For each row, create TableCell components equal to the amount of numOfCells\r\n     * For the entire table, create TableRow components equal to the amount of numOfRows\r\n     * \r\n     * Each cell gets a unique key and current color selected passed in as props\r\n     * Each row gets a unique key, an array of columns, and the current selected color to be \r\n     * passed down the hierarchy from Table to TableRow to TableCell\r\n     * \r\n     * @param {number} numOfRows Current number of rows the table has\r\n     * @param {number} numOfCells Current number of cells (columns) per row\r\n     * \r\n     * @returns {Array} The array of rows to be rendered in the table\r\n     */\r\n    produceTable(numOfRows, numOfCells)\r\n    {\r\n        let rows = [];\r\n\r\n        for(let i = 0; i < numOfRows; i++)\r\n        {\r\n            let columns = [];\r\n\r\n            for(let j = 0; j < numOfCells; j++)\r\n            {\r\n                columns.push(<TableCell key={i+j.toString()} color={this.state.color} />);\r\n            }\r\n            rows.push(<TableRow key={i.toString()} cells={columns} color={this.state.color} />);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    /**\r\n     * Event handler for Add Row button\r\n     * \r\n     * Will increment the number of rows by 1\r\n     */\r\n    handleAddRow = () =>\r\n    {\r\n        this.setState({ numOfRows: this.state.numOfRows + 1 });\r\n    }\r\n\r\n    /**\r\n     * Event handler for Add Column button\r\n     * \r\n     * Will increment the number of cells by 1\r\n     */\r\n    handleAddColumn = () =>\r\n    {\r\n        this.setState({ numOfCells: this.state.numOfCells + 1 });\r\n    }\r\n\r\n    /**\r\n     * Event handler color selection button\r\n     * \r\n     * Will update the state of color to the selected option\r\n     */\r\n    handleSelectColor = (event) =>\r\n    {\r\n        this.setState({ color: event.target.value });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A presentational component which is rendered by Table\r\n * \r\n * The TableRow component will:\r\n * - receive props from Table\r\n * - be a parent of TableCell\r\n * - render the cells (columns) of the row\r\n * - push down color state from Table to TableCell\r\n */\r\nexport default class TableRow extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            cells: props.cells,\r\n            color: props.color\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <tr className=\"grid-row\">\r\n                {this.props.cells}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nTableRow.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    cells: PropTypes.array.isRequired,\r\n    color: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A presentational component which is rendered by TableRow\r\n * \r\n * The TableCell component will:\r\n * - receive props from TableRow\r\n * - contain the state of its color\r\n * - handle click events of the cell\r\n */\r\nexport default class TableCell extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            color: \"transparent\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler that will update the cell's color upon click\r\n     */\r\n    handleClick = () =>\r\n    {\r\n        this.setState({ color: this.props.color });\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <td className=\"grid-cell\" bgcolor={this.state.color} onClick={this.handleClick} />\r\n        );\r\n    }\r\n}\r\n\r\nTableCell.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    color: PropTypes.string\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Table } from './components';\n\n/**\n * A stateful class component which handles the rendering of these presentational components:\n * - Table.js\n * - TableRow.js\n * - TableCell.js\n * \n * The minimum viable product features of this app are:\n * - A user can add a row\n * - A user can add a column\n * - A user can select a color\n * - A user can color in a single cell via click\n * \n * The App component will:\n * - create a single table component\n */\nexport default class App extends Component\n{\n    render()\n    {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>DOM Challenges 3</h1>\n                    <Table />\n                </header>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}